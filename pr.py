import utils
from tokens import token


def search_pr(language: str, start_date: str, end_date: str):
    '''
    Query pull requests created from start_date to end_date, and save links to files in csv tables
    :param language: repository language
    :param start_date: string in the format of YYYY-MM-DD
    :param end_date: string in the format of YYYY-MM-DD
    :return: none
    '''
    out_path = 'out/' + language + '/links/{}_{}.csv'
    utils.create_missing_dirs(out_path)

    # ulink example: https://api.github.com/search/issues?q=language:Java+is:pr+is:open+created:2020-09-10..2020-09-15
    query = f'https://api.github.com/search/issues?q=language:{language}+is:pr+is:open+created:{start_date}..{end_date}'
    ulink = query + '&page={}&per_page=100'

    for cnt in range(1, 101):
        resp = utils.send(ulink.format(cnt), token, 3)
        if not resp or resp.status_code != 200:
            break
        jresp = resp.json()

        file_list = []
        if 'items' in jresp:
            for item in jresp['items']:
                if 'url' in item:
                    link_files = item['url'].replace('/issues/', '/pulls/') + '/files\n'
                    file_list.append(link_files)
        if file_list:
            with open(out_path.format(start_date, end_date), 'a+') as outfile:
                outfile.writelines(file_list)


def save_files(csv_file: str, language: str):
    '''
    Query links in csv_file and save
    :param csv_file: the path to csv files generated by the method search_pr
    :param language: repository language
    :return: none
    '''
    out_path = f'out/{language}/files/'
    with open(csv_file, 'r') as f:
        for line in f:
            link = line.strip()

            savepath = link.replace('https://api.github.com/repos/', out_path) + '.json'
            if utils.exists_file(savepath):  # if file exists, do not send unnecessary request
                continue

            resp = utils.send(link, token, 3)
            if not resp or resp.status_code != 200:
                continue
            utils.save(resp.text, savepath)

if __name__ == '__main__':
    pass
